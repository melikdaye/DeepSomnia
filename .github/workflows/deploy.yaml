name: Deploy All
on:
  push:
    branches:
      - xavier

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Create server env file
        run: |
            touch ./node_server/.env
            echo DB_URI=${{ secrets.DB_URI }} >> ./node_server/.env
            echo AWS_ACCESS_KEY=${{ secrets.AWS_ACCESS_KEY }} >> ./node_server/.env
            echo AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_KEY }} >> ./node_server/.env
            echo AWS_REGION=${{ secrets.AWS_REGION }} >> ./node_server/.env
            echo AWS_BUCKET_NAME=${{ secrets.AWS_BUCKET_NAME }} >> ./node_server/.env
            echo AWS_URL_PREFIX=${{ secrets.AWS_URL_PREFIX }} >> ./node_server/.env
            echo MQTT_SERVER_IP=${{ secrets.MQTT_SERVER_IP }} >> ./node_server/.env
            echo MQTT_SERVER_PORT=${{ secrets.MQTT_SERVER_PORT }} >> ./node_server/.env
            echo MQTT_USERNAME=${{ secrets.MQTT_USERNAME }} >> ./node_server/.env
            echo MQTT_PASSWORD=${{ secrets.MQTT_PASSWORD }} >> ./node_server/.env
            echo JWT_KEY="${{ secrets.JWT_KEY }}" >> ./node_server/.env
            echo ALCHEMY_API_URL=${{ secrets.ALCHEMY_API_URL }} >> ./node_server/.env
            echo GOOGLE_API_CLIENT_ID=${{ secrets.GOOGLE_API_CLIENT_ID }} >> ./node_server/.env
            echo MAIL_SERVICE=${{ secrets.MAIL_SERVICE }} >> ./node_server/.env
            echo APP_MAIL=${{ secrets.APP_MAIL }} >> ./node_server/.env
            echo APP_MAIL_PASSWORD=${{ secrets.APP_MAIL_PASSWORD }} >> ./node_server/.env

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: "eu-central-1"
          
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Set up QEMU dependency
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
             docker buildx build  -t $ECR_REGISTRY/deepsomnia:deep-somnia-nginx ./nginx --platform=linux/arm64 --push
             docker buildx build  -t $ECR_REGISTRY/deepsomnia:deep-somnia-server  ./node_server --platform=linux/arm64 --push
             docker buildx build  -t $ECR_REGISTRY/deepsomnia:deep-somnia-client  ./deep_somnia_react --platform=linux/arm64 --push
             
      - name: Upload package to S3 bucket
        run: aws s3 cp docker-compose.yaml s3://deepsomniaprod/

      - name: Remote ssh into prod server
        uses: appleboy/ssh-action@master
        with:
            host: ${{ secrets.prodHost }}
            username: ${{ secrets.prodUsername }}
            password: ${{ secrets.prodPass }}
            port: ${{ secrets.prodPort }}
            script: |
              aws s3 cp s3://deepsomniaprod/docker-compose.yaml  deepSomnia/docker-compose.yaml
              cd deepSomnia
              docker-compose up

